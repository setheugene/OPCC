@font-face {
  font-family: 'Butler';
  src: url('../fonts/Butler-Light.woff2') format('woff2');
  font-weight: light;
  font-style: normal;
  font-display: swap;
}

/*
 * Text defaults. Tailwind removes pretty much ALL styling
 * from default elements to ensure that their utility classes
 * work as expected. This is a good thing. This means any time
 * you use an element, whether it's a p tag, li, a tag or a heading, you
 * need to explicitly set a class on it. This is good for clarity.
 * The wysiwyg wrapper class below will handle elements from WYSIWYGs
 * that do not have classes / formats applied. Font sizes are documented here:
 * https://tailwindcss.com/docs/font-size/#app
 *
 * Sizes set here are for example only. Overwrite and add formatting as necessary
 */

.hdg-1 {
  @apply font-serif text-5xl font-light uppercase leading-tighter;

  @screen md {
    @apply text-7xl;
  }
}

.hdg-2 {
  @apply font-serif text-4xl font-light leading-tight uppercase;

  @screen md {
    @apply text-6xl;
  }
}

.hdg-3 {
  @apply font-serif text-4xl font-light leading-tight uppercase;

  @screen md {
    @apply text-5xl;
  }
}

.hdg-4 {
  @apply font-serif text-xl font-light leading-tight uppercase;

  @screen md {
    @apply text-3xl;
  }
}

.hdg-5 {
  @apply font-sans text-base font-semibold leading-tight;

  @screen md {
    @apply text-xl;
  }
}

.hdg-6 {
  @apply font-sans text-sm leading-tight uppercase;
  letter-spacing: 2.4px;

  @screen md {
    @apply text-base;
  }
}

.paragraph-large {
  @apply font-sans text-lg leading-tight;
}

.paragraph-default {
  @apply font-sans text-base leading-tight;
}

.paragraph-small {
  @apply font-sans text-sm leading-tight;
}

.paragraph-xsmall {
  @apply font-sans text-xs leading-tight;
}

/*
 * Utility overwrites for automatically changing text colors
 * based on background color. Will need to add any necessary
 * possible background colors to the this. This is so that the user
 * does not have to manually select colors within the WYSIWYG
 * to fix the color scheme. Example, turning all text white
 * if there is a black background. Otherwise, they wouldn't be able
 * to see the text within the wysiwyg.
 *
 * Notice that it has classes for targeting the #tinymce.{background-color} for the
 * backend, and then .{background-color} .wysiwyg for the front end.
 *
 * If you have to set default colors for any text classes, then you have
 * to make these selectors more complex. Using the .hdg-1 color example from above
 * This targets the normal non text class h1 element, as well as checks for
 * any text color utilities. This is so the color can still be overwritten as expected
 * within the WYSIWYG formats

  #tinymce:is(.bg-brand-black),
  :is(.bg-brand-black) .wysiwyg {
    :is(h1, h2, h3 ):not([class*="hdg-"], [class*="paragraph-"], [class*="text-brand"], [class*="text-brand-white"], [class*="text-brand-black"]),
    .hdg-1,
    .hdg-2,
    .hdg-3 {
      color: white;
    }
  }
 */
#tinymce:is(.bg-brand-black, .bg-brand-eggplant),
:is(.bg-brand-black, .bg-brand-eggplant, .bg-image--overlay-dark) .wysiwyg {
  color: theme(colors.brand.white);
}

#tinymce:is(.bg-brand-white, .bg-brand-beige),
:is(.bg-brand-white, .bg-brand-beige) .wysiwyg {
  color: theme(colors.brand.black);
}

/*
 * .wysiwyg is a wrapper class for any content that will be
 * echoed out via any wysiwyg editor. Be sure to use
 * @apply {utility-class} when declaring text styles
 * when possible. #tinymce selector is used to target the body of the
 * WYSIWYGS on the backend of the site. This should not be targeted in production
 * on the front end anywhere on the site
 */

:where(.wysiwyg, #tinymce) {
  /*
   * zero out margins for first and
   * last elements within a WYSIWYG
   * to remove any unwanted vertical spacing
   */
  & > *:first-child {
    &:not([class*="mt-"]) {
      margin-top: 0 !important;
    }
  }

  & > *:last-child {
    &:not([class*="mb-"]) {
      margin-bottom: 0 !important;
    }
  }

  /*
   * set defaults to elements in the WYSIWYG that
   * do not have a style format/class applied to them. Notice that
   * by default, bottom margins get set. It's best to set bottom margin
   * rules for the WYSIWYG wrapper and explicitely set bottom margins using
   * utlities elswhere.
   */
  a:not([class*="hdg-"], [class*="paragraph-"], [class*="btn"]) {
    text-decoration: underline;
    &:hover, &:active, &:focus {
      text-decoration: none;
      color: theme(colors.brand.gold);
    }
  }

  :not([class*="hdg-"], [class*="paragraph-"], [class*="gform_"]) {
    &:where(p) {
      @extend .paragraph-default;
    }

    &:where(h1) {
      @extend .hdg-1;
    }

    &:where(h2) {
      @extend .hdg-2;
    }

    &:where(h3) {
      @extend .hdg-3;
    }

    &:where(h4) {
      @extend .hdg-4;
    }

    &:where(h5) {
      @extend .hdg-5;
    }

    &:where(h6) {
      @extend .hdg-6;
    }

    &:where(li) {
      @extend .paragraph-default;
    }
  }

  ul,
  ol {
    @apply pl-5;
    margin-bottom: 10px;

    li {
      &:not(:last-child) {
        &:not([class*="mb-"]) {
          margin-bottom: 10px;
        }
      }

      &:last-child {
        @apply mb-0;
      }
    }
    &.line-list {
      padding: 0;
      list-style: none;
      margin-bottom: 32px;
      li {
        padding: 12px 0;
        border-bottom: 1px solid theme(colors.brand.light-gray);

        &:first-of-type {
          padding-top: 0;
        }
      }
    }
  }

  /*
   * Set default list styles back to disk
   * and number
   */
  ul {
    @apply list-disc;
  }

  ol {
    @apply list-decimal;
  }

  /*
   * If you need to add any extra styling to specific
   * text classes, add them here. For instance, when coming
   * from the WYSIWYG, .hdg-1 needs a specific bottom margin
   * no matter what element it is applied to.
   */
  :not([class*="mb-"]) {
    &:where( .paragraph-default, p ) {
      @apply mb-5;
    }

    &:where( .hdg-hero ) {
      @apply mb-5;
    }

    &:where( .hdg-1, h1 ) {
      @apply mb-5;
    }

    &:where( .hdg-2, h2 ) {
      @apply mb-5;
    }

    &:where( .hdg-3, h3 ) {
      @apply mb-5;
    }

    &:where( .hdg-4, h4 ) {
      @apply mb-5;
    }

    &:where( .hdg-5, h5 ) {
      @apply mb-5;
    }

    &:where( .hdg-6, h6 ) {
      @apply mb-5;
    }

    &:where( .paragraph-large ) {
      @apply mb-5;
    }

    &:where( .paragraph-small ) {
      @apply mb-5;
    }

    &:where( .paragraph-xsmall ) {
      @apply mb-5;
    }
  }

  address {
    @extend .paragraph-small;
    font-style: normal;

    .street,
    .streetAddress {
      display: block;
    }

    .city::after,
    .addressLocality::after {
      content: ',';
    }

    .phone {
      display: block;
      @apply mt-2;
    }
  }

  blockquote {
    padding-left: 32px;
    margin-left: 32px;
    border-left: 3px solid theme(colors.brand.gold);
    font-weight: theme(fontWeight.semibold);
  }

  hr {
    margin: 48px 0;
    border-color: theme(colors.brand.gold);
  }
  table {
    width: 100%;
    border: 1px solid theme(colors.brand.light-gray);

    tbody {
      tr:first-of-type {
        background-color: theme(colors.brand.beige);
        border: 1px solid theme(colors.brand.light-gray);
        color: theme(colors.brand.black);
        font-weight: theme(fontWeight.semibold);

        td {
          padding: 20px 24px;
        }
      }
      tr:not(:first-of-type) {
        background-color: theme(colors.brand.white);
        border: 1px solid theme(colors.brand.light-gray);
        color: theme(colors.brand.gray);

        td {
          padding: 16px 24px;
        }
      }
    }
  }
}

.check-list {
  column-count: 1;
  column-gap: 2rem;

  @screen lg {
    column-count: 2;
  }

  li {
    position: relative;
    margin-bottom: theme(spacing.5);
    padding-left: 32px;
    -webkit-column-break-inside: avoid-column;
    page-break-inside: avoid-column;
    break-inside: avoid-column;

    &::before {
      content: "";
      background-image: url('../../assets/img/list-check.svg');
      background-repeat: no-repeat;
      background-size: contain;
      height: 20px;
      width: 20px;
      position: absolute;
      left: 0;
      top: 0;
    }

    &:last-of-type {
      margin-bottom: 0;
    }
  }
}
